{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { TextPropTypes } from \"react-native-web/dist/index\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { TextInput } from \"react-native-gesture-handler\";\nimport Color from \"../../../assets/Color\";\nimport PNumber from \"../../Component/Utils/NumberVerificationScreenUtil/Number\";\nimport OTP from \"../../Component/Utils/NumberVerificationScreenUtil/OTP\";\nimport { FirebaseRecaptchaVerifierModal } from \"expo-firebase-recaptcha\";\nimport firebase from \"firebase\";\nimport { useDispatch } from \"react-redux\";\nimport { AddPhoneNumber } from \"../../Store/action/auth\";\nimport { getContacts } from \"../../Store/action/contact\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar NumberVerification = function NumberVerification(props) {\n  var dispatch = useDispatch();\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      phoneNumber = _useState2[0],\n      setPhoneNumber = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inNumber = _useState4[0],\n      setinNumber = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      VerificationId = _useState6[0],\n      setVerificationId = _useState6[1];\n\n  var recaptchaVerifier = useRef(null);\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      send = _useState8[0],\n      setsend = _useState8[1];\n\n  var sendVerification = function sendVerification(num) {\n    var phoneProvider = new firebase.auth.PhoneAuthProvider();\n    phoneProvider.verifyPhoneNumber(num, recaptchaVerifier.current).then(setVerificationId).catch(function (err) {\n      alert(err);\n    });\n    setinNumber(false);\n  };\n\n  var confirmCode = function confirmCode(code) {\n    var credential, response, token;\n    return _regeneratorRuntime.async(function confirmCode$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            credential = firebase.auth.PhoneAuthProvider.credential(VerificationId, code);\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(firebase.auth().signInWithCredential(credential));\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(response.user.getIdToken(true));\n\n          case 7:\n            token = _context.sent;\n            setsend({\n              number: response.user.phoneNumber,\n              token: token,\n              uid: response.user.uid\n            });\n            _context.next = 15;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0.message);\n\n            if (_context.t0.message == \"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.\") {\n              alert(\"Invalid OTP\");\n            }\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 11]], Promise);\n  };\n\n  useEffect(function () {\n    if (send.number) {\n      dispatch(AddPhoneNumber(send.number, send.uid, send.token));\n      dispatch(getContacts(send.uid));\n    }\n  }, [send]);\n\n  var changeToOtp = function changeToOtp(number) {\n    setPhoneNumber(\"+91\" + number);\n    sendVerification(\"+91\" + number);\n  };\n\n  var ResendOTP = function ResendOTP() {\n    sendVerification(phoneNumber);\n  };\n\n  var ValueOtp = function ValueOtp(code) {\n    confirmCode(code);\n  };\n\n  return _jsxs(SafeAreaView, {\n    style: styles.screen,\n    children: [inNumber && _jsx(PNumber, {\n      change: changeToOtp,\n      send: sendVerification\n    }), !inNumber && _jsx(OTP, {\n      sendCode: ValueOtp,\n      resend: ResendOTP\n    }), _jsx(FirebaseRecaptchaVerifierModal, {\n      ref: recaptchaVerifier,\n      firebaseConfig: firebase.app().options\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    backgroundColor: Color.black\n  }\n});\nexport default NumberVerification;","map":{"version":3,"sources":["/Users/saahithshetty/ReactNative/Eveels-2/source/Screen/Login/NumberVerificationScreen.js"],"names":["React","useState","useRef","useEffect","TextPropTypes","TextInput","Color","PNumber","OTP","FirebaseRecaptchaVerifierModal","firebase","useDispatch","AddPhoneNumber","getContacts","NumberVerification","props","dispatch","phoneNumber","setPhoneNumber","inNumber","setinNumber","VerificationId","setVerificationId","recaptchaVerifier","send","setsend","sendVerification","num","phoneProvider","auth","PhoneAuthProvider","verifyPhoneNumber","current","then","catch","err","alert","confirmCode","code","credential","signInWithCredential","response","user","getIdToken","token","number","uid","console","log","message","changeToOtp","ResendOTP","ValueOtp","styles","screen","app","options","StyleSheet","create","flex","backgroundColor","black"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { Dimensions, TextPropTypes, TouchableOpacity } from \"react-native\";\nimport { StyleSheet, View, Text, SafeAreaView } from \"react-native\";\nimport { TextInput } from \"react-native-gesture-handler\";\nimport Color from \"../../../assets/Color\";\nimport PNumber from \"../../Component/Utils/NumberVerificationScreenUtil/Number\";\nimport OTP from \"../../Component/Utils/NumberVerificationScreenUtil/OTP\";\nimport { FirebaseRecaptchaVerifierModal } from \"expo-firebase-recaptcha\";\nimport firebase from \"firebase\";\nimport { useDispatch } from \"react-redux\";\nimport { AddPhoneNumber } from \"../../Store/action/auth\";\nimport { getContacts } from \"../../Store/action/contact\";\nconst NumberVerification = (props) => {\n  const dispatch = useDispatch();\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [inNumber, setinNumber] = useState(true);\n  const [VerificationId, setVerificationId] = useState(null);\n  const recaptchaVerifier = useRef(null);\n  const [send, setsend] = useState({});\n\n  const sendVerification = (num) => {\n    const phoneProvider = new firebase.auth.PhoneAuthProvider();\n    //console.log(phoneProvider, num);\n    phoneProvider\n      .verifyPhoneNumber(num, recaptchaVerifier.current)\n      .then(setVerificationId)\n      .catch((err) => {\n        alert(err);\n      });\n    setinNumber(false);\n  };\n\n  const confirmCode = async (code) => {\n    const credential = firebase.auth.PhoneAuthProvider.credential(\n      VerificationId,\n      code\n    );\n    try {\n      const response = await firebase.auth().signInWithCredential(credential);\n      const token = await response.user.getIdToken(true);\n      // `console.log(\"User :\", response.additionalUserInfo.isNewUser);\n      // console.log(\"Number :\", response.user.phoneNumber);\n      // console.log(\"Email :\", response.user.email);\n      // console.log(\"name \", response.user.displayName);\n      // console.log(\"Token:\", token);\n      // console.log(\"UID:\", response.user.uid);`\n      setsend({\n        number: response.user.phoneNumber,\n        token: token,\n        uid: response.user.uid,\n      });\n    } catch (err) {\n      console.log(err.message);\n      if (\n        err.message ==\n        \"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.\"\n      ) {\n        alert(\"Invalid OTP\");\n      }\n    }\n  };\n  useEffect(() => {\n    if (send.number) {\n      dispatch(AddPhoneNumber(send.number, send.uid, send.token));\n      dispatch(getContacts(send.uid));\n    }\n  }, [send]);\n\n  const changeToOtp = (number) => {\n    setPhoneNumber(\"+91\" + number);\n    sendVerification(\"+91\" + number);\n  };\n\n  const ResendOTP = () => {\n    //console.log(phoneNumber);\n    sendVerification(phoneNumber);\n  };\n\n  const ValueOtp = (code) => {\n    confirmCode(code);\n  };\n  return (\n    <SafeAreaView style={styles.screen}>\n      {inNumber && <PNumber change={changeToOtp} send={sendVerification} />}\n      {!inNumber && <OTP sendCode={ValueOtp} resend={ResendOTP} />}\n      <FirebaseRecaptchaVerifierModal\n        ref={recaptchaVerifier}\n        firebaseConfig={firebase.app().options}\n      />\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    backgroundColor: Color.black,\n  },\n});\n\nexport default NumberVerification;\n"]},"metadata":{},"sourceType":"module"}