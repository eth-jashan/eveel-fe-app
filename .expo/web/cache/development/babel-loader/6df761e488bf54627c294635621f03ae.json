{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport MapView, { Marker } from \"react-native-maps\";\nimport { CommonActions } from \"@react-navigation/routers\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { mapStyle } from \"../../Component/Utils/PumpScreen/mapStylesUtil\";\nimport PumpInfoModal from \"../../Component/Utils/PumpScreen/PumpInfoModelUtil\";\nimport { Modalize } from \"react-native-modalize\";\nimport Color from \"../../../assets/Color\";\nimport { AntDesign } from \"@expo/vector-icons\";\nimport Dash from \"react-native-dash\";\nimport { useNavigationState } from \"@react-navigation/core\";\nimport styles from \"./PumpStyles/PumpscreenStyles\";\n\nvar _Dimensions$get = Dimensions.get(\"window\"),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nimport MapViewDirections from \"react-native-maps-directions\";\nimport { useSelector } from \"react-redux\";\nimport getGoogleDirections from \"../../Component/Common/GetDirection\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar pumpLocation = function pumpLocation(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var location = route.params.location;\n  var origin = {\n    latitude: location.coords.latitude,\n    longitude: location.coords.longitude\n  };\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedPump = _useState2[0],\n      setSelectedPump = _useState2[1];\n\n  var GOOGLE_MAPS_APIKEY = \"AIzaSyDsDKH-37DS6ZnGY_oIi7t5YE0oAAZ-V88\";\n\n  var handleGetDirections = function handleGetDirections() {\n    getGoogleDirections(selectedPump.latitude, selectedPump.longitude, origin);\n  };\n\n  var listofPump = useSelector(function (state) {\n    return state.pumpStation.stationList;\n  });\n  console.log(listofPump.length);\n  var listOfCity = [{\n    name: \"Delhi\",\n    lat: \"28.7041\",\n    long: \"77.1025\"\n  }, {\n    name: \"Mumbai\",\n    lat: \"19.0760\",\n    long: \"72.8777\"\n  }, {\n    name: \"Bangalore\",\n    lat: \"12.9716\",\n    long: \"77.5946\"\n  }, {\n    name: \"Hyderabad\",\n    lat: \"17.3850\",\n    long: \"78.4867\"\n  }];\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      pumpInfo = _React$useState2[0],\n      setPumpInfo = _React$useState2[1];\n\n  var pumpRef = React.useRef(null);\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      select = _React$useState4[0],\n      setSelect = _React$useState4[1];\n\n  var onLocationPress = function onLocationPress(item) {\n    var _pumpRef$current;\n\n    setPumpInfo(item);\n    pumpRef == null ? void 0 : (_pumpRef$current = pumpRef.current) == null ? void 0 : _pumpRef$current.open();\n    setSelectedPump({\n      latitude: item.lat,\n      longitude: item.long\n    });\n  };\n\n  var onLocationCity = function onLocationCity(item, index) {\n    return _regeneratorRuntime.async(function onLocationCity$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setSelect(index));\n\n          case 2:\n            setPumpInfo(item);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      exit = _useState4[0],\n      setExit = _useState4[1];\n\n  var index = useNavigationState(function (state) {\n    return state;\n  });\n  useEffect(function () {\n    navigation.addListener(\"beforeRemove\", function (e) {\n      e.preventDefault();\n      setExit(true);\n      Alert.alert(\"Are you sure?\", \"If you leave you would be directed to Home Screen\", [{\n        text: \"Stay\",\n        style: \"cancel\",\n        onPress: function onPress() {}\n      }, {\n        text: \"Leave\",\n        style: \"destructive\",\n        onPress: function onPress() {\n          navigation.dispatch(CommonActions.navigate({\n            name: \"Home\",\n            key: index.routes[0].state.routes[0].key\n          }));\n        }\n      }]);\n    });\n  }, [navigation]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(MapView, {\n      userInterfaceStyle: \"dark\",\n      customMapStyle: mapStyle,\n      region: {\n        latitude: pumpInfo ? parseFloat(pumpInfo.lat) : origin.latitude,\n        longitude: pumpInfo ? parseFloat(pumpInfo.long) : origin.longitude,\n        latitudeDelta: 0.422,\n        longitudeDelta: 0.421\n      },\n      style: styles.ScreenFuller,\n      children: [listofPump.map(function (item, i) {\n        return _jsx(Marker, {\n          tracksViewChanges: false,\n          onPress: function _callee() {\n            return _regeneratorRuntime.async(function _callee$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return _regeneratorRuntime.awrap(onLocationPress(item));\n\n                  case 2:\n                    return _context2.abrupt(\"return\", _context2.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          },\n          coordinate: {\n            latitude: parseFloat(item.lat),\n            longitude: parseFloat(item.long)\n          },\n          style: {\n            height: 10,\n            width: 10\n          },\n          icon: require(\"../../../assets/Images/pumpMarker.png\")\n        }, i);\n      }), selectedPump && _jsxs(_Fragment, {\n        children: [_jsx(Marker, {\n          onPress: function _callee2() {\n            return _regeneratorRuntime.async(function _callee2$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.next = 2;\n                    return _regeneratorRuntime.awrap(onLocationPress(item));\n\n                  case 2:\n                    return _context3.abrupt(\"return\", _context3.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          },\n          coordinate: origin,\n          children: _jsx(View, {\n            style: {\n              width: 30,\n              height: 30\n            },\n            children: _jsx(Image, {\n              resizeMode: \"contain\",\n              source: require(\"../../../assets/Images/top-UberX.png\"),\n              style: styles.ScreenFuller\n            })\n          })\n        }), _jsx(MapViewDirections, {\n          origin: origin,\n          destination: {\n            latitude: parseFloat(selectedPump.latitude),\n            longitude: parseFloat(selectedPump.longitude)\n          },\n          apikey: GOOGLE_MAPS_APIKEY,\n          strokeWidth: 3,\n          strokeColor: Color.lightgreen\n        })]\n      })]\n    }), _jsxs(View, {\n      style: styles.TabArea,\n      children: [_jsxs(View, {\n        style: styles.locationText,\n        children: [_jsx(Text, {\n          numberOfLines: 1,\n          style: styles.address,\n          children: \"Krishna Changa Naik Marg, Seawoods West, Sector 44A, Seawoods, Navi Mumbai, Maharashtra 400706\"\n        }), _jsx(View, {\n          style: styles.icon,\n          children: _jsx(AntDesign, {\n            onPress: function onPress() {\n              return navigation.navigate(\"PumpSearch\", {\n                origin: origin\n              });\n            },\n            name: \"search1\",\n            size: 24,\n            color: Color.white\n          })\n        })]\n      }), _jsxs(View, {\n        style: {\n          width: \"100%\"\n        },\n        children: [_jsx(Text, {\n          style: styles.menuTitle,\n          children: \"Famous location search\"\n        }), _jsx(FlatList, {\n          horizontal: true,\n          data: listOfCity,\n          showsHorizontalScrollIndicator: false,\n          keyExtractor: function keyExtractor(x) {\n            return x.name;\n          },\n          renderItem: function renderItem(_ref2) {\n            var item = _ref2.item,\n                index = _ref2.index;\n            return _jsx(Pressable, {\n              onPress: function onPress() {\n                return onLocationCity(item, index);\n              },\n              style: [{\n                marginLeft: index === 0 ? 8 : 0,\n                backgroundColor: index === select ? Color.lightgreen : null\n              }, styles.options],\n              children: _jsx(Text, {\n                style: [{\n                  color: index === select ? Color.black : Color.lightgreen\n                }, styles.OptionText],\n                children: item.name\n              })\n            });\n          }\n        })]\n      })]\n    }), _jsx(PumpInfoModal, {\n      modalRef: pumpRef,\n      height: 200,\n      item: pumpInfo,\n      direction: handleGetDirections\n    })]\n  });\n};\n\nexport default pumpLocation;","map":{"version":3,"sources":["/Users/saahithshetty/ReactNative/Eveels-2/source/Screen/Pump/Pumpscreen.js"],"names":["React","useEffect","useState","MapView","Marker","CommonActions","mapStyle","PumpInfoModal","Modalize","Color","AntDesign","Dash","useNavigationState","styles","Dimensions","get","width","height","MapViewDirections","useSelector","getGoogleDirections","pumpLocation","navigation","route","location","params","origin","latitude","coords","longitude","selectedPump","setSelectedPump","GOOGLE_MAPS_APIKEY","handleGetDirections","listofPump","state","pumpStation","stationList","console","log","length","listOfCity","name","lat","long","pumpInfo","setPumpInfo","pumpRef","useRef","select","setSelect","onLocationPress","item","current","open","onLocationCity","index","exit","setExit","addListener","e","preventDefault","Alert","alert","text","style","onPress","dispatch","navigate","key","routes","container","parseFloat","latitudeDelta","longitudeDelta","ScreenFuller","map","i","require","lightgreen","TabArea","locationText","address","icon","white","menuTitle","x","marginLeft","backgroundColor","options","color","black","OptionText"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport MapView, { Marker } from \"react-native-maps\";\nimport { CommonActions } from \"@react-navigation/routers\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Dimensions,\n  FlatList,\n  Animated,\n  Image,\n  Pressable,\n  TouchableOpacity,\n  Modal,\n  Button,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport { mapStyle } from \"../../Component/Utils/PumpScreen/mapStylesUtil\";\nimport PumpInfoModal from \"../../Component/Utils/PumpScreen/PumpInfoModelUtil\";\nimport { Modalize } from \"react-native-modalize\";\nimport Color from \"../../../assets/Color\";\n// import ListPump from \"../component/listPump\";\n// import MapHeader from \"../component/MapHeader\";\nimport { AntDesign } from \"@expo/vector-icons\";\nimport Dash from \"react-native-dash\";\nimport { useNavigationState } from \"@react-navigation/core\";\nimport styles from \"./PumpStyles/PumpscreenStyles\";\nconst { width, height } = Dimensions.get(\"window\");\nimport MapViewDirections from \"react-native-maps-directions\";\nimport { useSelector } from \"react-redux\";\nimport getGoogleDirections from \"../../Component/Common/GetDirection\";\nconst pumpLocation = ({ navigation, route }) => {\n  const { location } = route.params;\n  //console.log(\"PumpScreen:\", location.coords);\n  const origin = {\n    latitude: location.coords.latitude,\n    longitude: location.coords.longitude,\n  };\n  const [selectedPump, setSelectedPump] = useState(null);\n  const GOOGLE_MAPS_APIKEY = \"AIzaSyDsDKH-37DS6ZnGY_oIi7t5YE0oAAZ-V88\";\n  //const GOOGLE_MAPS_APIKEY = \"AIzaSyDkqyDGvoPwEuPXniKNb_JceM37MJscerE\"; //for testing have to open the above one for iphone aswell\n\n  const handleGetDirections = () => {\n    getGoogleDirections(selectedPump.latitude, selectedPump.longitude, origin);\n  };\n  let listofPump = useSelector((state) => state.pumpStation.stationList);\n  console.log(listofPump.length);\n  // const listofPump = [\n  //   { name: \"Volttic Charging Station\", lat: \"19.00013\", long: \"73.10938\" },\n  //   { name: \"ChargeGrid\", lat: \"19.07434\", long: \"72.9869988\" },\n  //   { name: \"XYZ Station\", lat: \"19.08551\", long: \"72.88764\" },\n  // ];\n\n  const listOfCity = [\n    { name: \"Delhi\", lat: \"28.7041\", long: \"77.1025\" },\n    { name: \"Mumbai\", lat: \"19.0760\", long: \"72.8777\" },\n    { name: \"Bangalore\", lat: \"12.9716\", long: \"77.5946\" },\n    { name: \"Hyderabad\", lat: \"17.3850\", long: \"78.4867\" },\n  ];\n  const [pumpInfo, setPumpInfo] = React.useState();\n  const pumpRef = React.useRef(null);\n  const [select, setSelect] = React.useState(false);\n\n  const onLocationPress = (item) => {\n    setPumpInfo(item);\n    //console.log(\"Item\", item);\n    pumpRef?.current?.open();\n    setSelectedPump({\n      latitude: item.lat,\n      longitude: item.long,\n    });\n  };\n  const onLocationCity = async (item, index) => {\n    await setSelect(index);\n    setPumpInfo(item);\n  };\n\n  const [exit, setExit] = useState(false);\n  const index = useNavigationState((state) => state);\n  // console.log(\n  //   \"PumpScreen to Homescreen state====>\",\n  //   index.routes[0].state.routes\n  // );\n  useEffect(() => {\n    navigation.addListener(\"beforeRemove\", (e) => {\n      e.preventDefault();\n      setExit(true);\n      Alert.alert(\n        \"Are you sure?\",\n        \"If you leave you would be directed to Home Screen\",\n        [\n          { text: \"Stay\", style: \"cancel\", onPress: () => {} },\n          {\n            text: \"Leave\",\n            style: \"destructive\",\n            // If the user confirmed, then we dispatch the action we blocked earlier\n            // This will continue the action that had triggered the removal of the screen\n            onPress: () => {\n              navigation.dispatch(\n                CommonActions.navigate({\n                  name: \"Home\",\n                  key: index.routes[0].state.routes[0].key,\n                })\n              );\n            },\n          },\n        ]\n      );\n    });\n  }, [navigation]);\n  return (\n    <View style={styles.container}>\n      <MapView\n        userInterfaceStyle={\"dark\"}\n        customMapStyle={mapStyle}\n        region={{\n          latitude: pumpInfo ? parseFloat(pumpInfo.lat) : origin.latitude,\n          longitude: pumpInfo ? parseFloat(pumpInfo.long) : origin.longitude,\n          latitudeDelta: 0.422,\n          longitudeDelta: 0.421,\n        }}\n        style={styles.ScreenFuller}\n      >\n        {listofPump.map((item, i) => {\n          return (\n            <Marker\n              key={i}\n              tracksViewChanges={false}\n              onPress={async () => await onLocationPress(item)}\n              coordinate={{\n                latitude: parseFloat(item.lat),\n                longitude: parseFloat(item.long),\n              }}\n              style={{ height: 10, width: 10 }}\n              icon={require(\"../../../assets/Images/pumpMarker.png\")}\n            />\n          );\n        })}\n        {selectedPump && (\n          <>\n            <Marker\n              onPress={async () => await onLocationPress(item)}\n              coordinate={origin}\n            >\n              <View style={{ width: 30, height: 30 }}>\n                <Image\n                  resizeMode=\"contain\"\n                  source={require(\"../../../assets/Images/top-UberX.png\")}\n                  style={styles.ScreenFuller}\n                />\n              </View>\n            </Marker>\n            <MapViewDirections\n              origin={origin}\n              destination={{\n                latitude: parseFloat(selectedPump.latitude),\n                longitude: parseFloat(selectedPump.longitude),\n              }}\n              apikey={GOOGLE_MAPS_APIKEY}\n              strokeWidth={3}\n              strokeColor={Color.lightgreen}\n            />\n          </>\n        )}\n      </MapView>\n      <View style={styles.TabArea}>\n        <View style={styles.locationText}>\n          <Text numberOfLines={1} style={styles.address}>\n            Krishna Changa Naik Marg, Seawoods West, Sector 44A, Seawoods, Navi\n            Mumbai, Maharashtra 400706\n          </Text>\n          <View style={styles.icon}>\n            <AntDesign\n              onPress={() =>\n                navigation.navigate(\"PumpSearch\", { origin: origin })\n              }\n              name=\"search1\"\n              size={24}\n              color={Color.white}\n            />\n          </View>\n        </View>\n        <View style={{ width: \"100%\" }}>\n          <Text style={styles.menuTitle}>Famous location search</Text>\n          <FlatList\n            horizontal\n            data={listOfCity}\n            showsHorizontalScrollIndicator={false}\n            keyExtractor={(x) => x.name}\n            renderItem={({ item, index }) => {\n              return (\n                <Pressable\n                  onPress={() => onLocationCity(item, index)}\n                  style={[\n                    {\n                      marginLeft: index === 0 ? 8 : 0,\n                      backgroundColor:\n                        index === select ? Color.lightgreen : null,\n                    },\n                    styles.options,\n                  ]}\n                >\n                  <Text\n                    style={[\n                      {\n                        color:\n                          index === select ? Color.black : Color.lightgreen,\n                      },\n                      styles.OptionText,\n                    ]}\n                  >\n                    {item.name}\n                  </Text>\n                </Pressable>\n              );\n            }}\n          />\n        </View>\n      </View>\n      <PumpInfoModal\n        modalRef={pumpRef}\n        height={200}\n        item={pumpInfo}\n        direction={handleGetDirections}\n      />\n    </View>\n  );\n};\n\nexport default pumpLocation;\n"]},"metadata":{},"sourceType":"module"}