{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport api_utils from \"../../../assets/api\";\nimport endPoints from \"../../../assets/endpoints\";\nimport CompanyModel from \"../../../model/companyModel\";\nexport var FETCH_COMPANY = \"FETCH_COMPANY\";\nexport var fetchCompany = function fetchCompany() {\n  return function _callee(dispatch, getState) {\n    var response, resdata, companyList, key;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"\" + api_utils.baseURL_Demo + endPoints.company_details + \".json?\"));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            resdata = _context.sent;\n            companyList = [];\n\n            for (key in resdata) {\n              companyList.push(new CompanyModel(key, resdata[key].logoUrl, resdata[key].name, resdata[key].type, resdata[key].backgroundUrl));\n            }\n\n            dispatch({\n              type: FETCH_COMPANY,\n              data: companyList\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/saahithshetty/ReactNative/Eveels-2/source/Store/action/company.js"],"names":["api_utils","endPoints","CompanyModel","FETCH_COMPANY","fetchCompany","dispatch","getState","fetch","baseURL_Demo","company_details","response","json","resdata","companyList","key","push","logoUrl","name","type","backgroundUrl","data"],"mappings":";AAAA,OAAOA,SAAP;AACA,OAAOC,SAAP;AACA,OAAOC,YAAP;AAEA,OAAO,IAAMC,aAAa,GAAG,eAAtB;AAEP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAChC,SAAO,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACkBC,KAAK,MACvBP,SAAS,CAACQ,YADa,GACEP,SAAS,CAACQ,eADZ,YADvB;;AAAA;AACCC,YAAAA,QADD;AAAA;AAAA,6CAIiBA,QAAQ,CAACC,IAAT,EAJjB;;AAAA;AAICC,YAAAA,OAJD;AAKCC,YAAAA,WALD,GAKe,EALf;;AAML,iBAAWC,GAAX,IAAkBF,OAAlB,EAA2B;AAGzBC,cAAAA,WAAW,CAACE,IAAZ,CACE,IAAIb,YAAJ,CACEY,GADF,EAEEF,OAAO,CAACE,GAAD,CAAP,CAAaE,OAFf,EAGEJ,OAAO,CAACE,GAAD,CAAP,CAAaG,IAHf,EAIEL,OAAO,CAACE,GAAD,CAAP,CAAaI,IAJf,EAKEN,OAAO,CAACE,GAAD,CAAP,CAAaK,aALf,CADF;AASD;;AACDd,YAAAA,QAAQ,CAAC;AAAEa,cAAAA,IAAI,EAAEf,aAAR;AAAuBiB,cAAAA,IAAI,EAAEP;AAA7B,aAAD,CAAR;;AAnBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAqBD,CAtBM","sourcesContent":["import api_utils from \"../../../assets/api\";\nimport endPoints from \"../../../assets/endpoints\";\nimport CompanyModel from \"../../../model/companyModel\";\n\nexport const FETCH_COMPANY = \"FETCH_COMPANY\";\n\nexport const fetchCompany = () => {\n  return async (dispatch, getState) => {\n    const response = await fetch(\n      `${api_utils.baseURL_Demo}${endPoints.company_details}.json?`\n    );\n    const resdata = await response.json();\n    const companyList = [];\n    for (const key in resdata) {\n      //Removed the if condition of checking the type=='car' as type also had two wheeler\n      //console.log(key);\n      companyList.push(\n        new CompanyModel(\n          key,\n          resdata[key].logoUrl,\n          resdata[key].name,\n          resdata[key].type,\n          resdata[key].backgroundUrl\n        )\n      );\n    }\n    dispatch({ type: FETCH_COMPANY, data: companyList });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}