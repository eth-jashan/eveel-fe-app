{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport firebase from \"firebase\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { LoggedInUser } from \"../Store/action/auth\";\nimport { fetchOwnedCar } from \"../Store/action/ownedCar\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar StartupScreen = function StartupScreen(props) {\n  var dispatch = useDispatch();\n  var selector = useSelector(function (state) {\n    return state.auth;\n  });\n  var car = useSelector(function (state) {\n    return state.ownedCar;\n  });\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLogged = _useState2[0],\n      setIsLogged = _useState2[1];\n\n  var call_function = function call_function(user) {\n    return _regeneratorRuntime.async(function call_function$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(dispatch(LoggedInUser(user.uid)));\n\n          case 2:\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(dispatch(fetchOwnedCar()));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var checkifLoggedIn = function checkifLoggedIn() {\n    return _regeneratorRuntime.async(function checkifLoggedIn$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            firebase.auth().onAuthStateChanged(function _callee(user) {\n              return _regeneratorRuntime.async(function _callee$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      if (!user) {\n                        _context2.next = 6;\n                        break;\n                      }\n\n                      _context2.next = 3;\n                      return _regeneratorRuntime.awrap(call_function(user));\n\n                    case 3:\n                      setIsLogged(true);\n                      _context2.next = 7;\n                      break;\n\n                    case 6:\n                      props.navigation.navigate(\"Login\");\n\n                    case 7:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            });\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    checkifLoggedIn();\n  }, []);\n  useEffect(function () {\n    if (isLogged) {\n      if (car.carName) {\n        props.navigation.navigate(\"Home\");\n      } else {\n        props.navigation.navigate(\"SelectVehicle\");\n      }\n    }\n  }, [isLogged, car]);\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(ActivityIndicator, {\n      size: \"large\"\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});\nexport default StartupScreen;","map":{"version":3,"sources":["/Users/saahithshetty/ReactNative/Eveels-2/source/Screen/StartupScreen.js"],"names":["React","useEffect","useState","firebase","useDispatch","useSelector","LoggedInUser","fetchOwnedCar","StartupScreen","props","dispatch","selector","state","auth","car","ownedCar","isLogged","setIsLogged","call_function","user","uid","checkifLoggedIn","onAuthStateChanged","navigation","navigate","carName","styles","container","StyleSheet","create","flex","alignItems","justifyContent"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAEA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,YAAT;AACA,SAASC,aAAT;;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/B,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,MAAMO,QAAQ,GAAGN,WAAW,CAAC,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAA5B;AACA,MAAMC,GAAG,GAAGT,WAAW,CAAC,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACG,QAAjB;AAAA,GAAD,CAAvB;;AACA,kBAAgCb,QAAQ,CAAC,KAAD,CAAxC;AAAA;AAAA,MAAOc,QAAP;AAAA,MAAiBC,WAAjB;;AACA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACdT,QAAQ,CAACJ,YAAY,CAACa,IAAI,CAACC,GAAN,CAAb,CADM;;AAAA;AAAA;AAAA,6CAEdV,QAAQ,CAACH,aAAa,EAAd,CAFM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAIA,MAAMc,eAAe,GAAG,SAAlBA,eAAkB;AAAA;AAAA;AAAA;AAAA;AACtBlB,YAAAA,QAAQ,CAACU,IAAT,GAAgBS,kBAAhB,CAAmC,iBAAOH,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA,2BAG7BA,IAH6B;AAAA;AAAA;AAAA;;AAAA;AAAA,uDAIzBD,aAAa,CAACC,IAAD,CAJY;;AAAA;AAM/BF,sBAAAA,WAAW,CAAC,IAAD,CAAX;AAN+B;AAAA;;AAAA;AAQ/BR,sBAAAA,KAAK,CAACc,UAAN,CAAiBC,QAAjB,CAA0B,OAA1B;;AAR+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAnC;;AADsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAcAvB,EAAAA,SAAS,CAAC,YAAM;AACdoB,IAAAA,eAAe;AAChB,GAFQ,EAEN,EAFM,CAAT;AAIApB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIe,QAAJ,EAAc;AACZ,UAAIF,GAAG,CAACW,OAAR,EAAiB;AAEfhB,QAAAA,KAAK,CAACc,UAAN,CAAiBC,QAAjB,CAA0B,MAA1B;AACD,OAHD,MAGO;AACLf,QAAAA,KAAK,CAACc,UAAN,CAAiBC,QAAjB,CAA0B,eAA1B;AACD;AACF;AACF,GATQ,EASN,CAACR,QAAD,EAAWF,GAAX,CATM,CAAT;AAWA,SACE,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEY,MAAM,CAACC,SAApB;AAAA,cACE,KAAC,iBAAD;AAAmB,MAAA,IAAI,EAAC;AAAxB;AADF,IADF;AAKD,CA3CD;;AA6CA,IAAMD,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE;AAHP;AADoB,CAAlB,CAAf;AAQA,eAAexB,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { View, ActivityIndicator, StyleSheet } from \"react-native\";\nimport firebase from \"firebase\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { LoggedInUser } from \"../Store/action/auth\";\nimport { fetchOwnedCar } from \"../Store/action/ownedCar\";\n\nconst StartupScreen = (props) => {\n  const dispatch = useDispatch();\n  const selector = useSelector((state) => state.auth);\n  const car = useSelector((state) => state.ownedCar);\n  const [isLogged, setIsLogged] = useState(false);\n  const call_function = async (user) => {\n    await dispatch(LoggedInUser(user.uid));\n    await dispatch(fetchOwnedCar());\n  };\n  const checkifLoggedIn = async () => {\n    firebase.auth().onAuthStateChanged(async (user) => {\n      //console.log(user.uid);\n      //console.log(selector);\n      if (user) {\n        await call_function(user);\n        //console.log(\"CAR=====>\", car);\n        setIsLogged(true);\n      } else {\n        props.navigation.navigate(\"Login\");\n      }\n    });\n  };\n\n  useEffect(() => {\n    checkifLoggedIn();\n  }, []);\n\n  useEffect(() => {\n    if (isLogged) {\n      if (car.carName) {\n        //console.log(car);\n        props.navigation.navigate(\"Home\");\n      } else {\n        props.navigation.navigate(\"SelectVehicle\");\n      }\n    }\n  }, [isLogged, car]);\n\n  return (\n    <View style={styles.container}>\n      <ActivityIndicator size=\"large\" />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n\nexport default StartupScreen;\n"]},"metadata":{},"sourceType":"module"}