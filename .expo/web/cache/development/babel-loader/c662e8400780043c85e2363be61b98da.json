{"ast":null,"code":"import Linking from \"react-native-web/dist/exports/Linking\";\n\nvar isValidLatLng = function isValidLatLng(num, range) {\n  return typeof num === 'number' && num <= range && num >= -1 * range;\n};\n\nvar isValidCoordinates = function isValidCoordinates(coords) {\n  return isValidLatLng(coords.latitude, 90) && isValidLatLng(coords.longitude, 180);\n};\n\nvar getParams = function getParams() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return params.map(function (_ref) {\n    var key = _ref.key,\n        value = _ref.value;\n    var encodedKey = encodeURIComponent(key);\n    var encodedValue = encodeURIComponent(value);\n    return encodedKey + \"=\" + encodedValue;\n  }).join('&');\n};\n\nvar getWaypoints = function getWaypoints() {\n  var waypoints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  if (waypoints.length === 0) {\n    return '';\n  }\n\n  var params = waypoints.map(function (value) {\n    return value.latitude + \",\" + value.longitude;\n  }).join('|');\n  return \"&waypoints=\" + params;\n};\n\nfunction getDirections() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      destination = _ref2.destination,\n      source = _ref2.source,\n      _ref2$params = _ref2.params,\n      params = _ref2$params === void 0 ? [] : _ref2$params,\n      _ref2$waypoints = _ref2.waypoints,\n      waypoints = _ref2$waypoints === void 0 ? [] : _ref2$waypoints;\n\n  if (destination && isValidCoordinates(destination)) {\n    params.push({\n      key: 'destination',\n      value: destination.latitude + \",\" + destination.longitude\n    });\n  }\n\n  if (source && isValidCoordinates(source)) {\n    params.push({\n      key: 'origin',\n      value: source.latitude + \",\" + source.longitude\n    });\n  }\n\n  var url = \"https://www.google.com/maps/dir/?api=1&\" + getParams(params) + getWaypoints(waypoints);\n  return Linking.canOpenURL(url).then(function (supported) {\n    if (!supported) {\n      return Promise.reject(new Error(\"Could not open the url: \" + url));\n    } else {\n      return Linking.openURL(url);\n    }\n  });\n}\n\nexport default getDirections;","map":{"version":3,"sources":["/Users/saahithshetty/ReactNative/Eveels-2/node_modules/react-native-google-maps-directions/index.js"],"names":["isValidLatLng","num","range","isValidCoordinates","coords","latitude","longitude","getParams","params","map","key","value","encodedKey","encodeURIComponent","encodedValue","join","getWaypoints","waypoints","length","getDirections","destination","source","push","url","Linking","canOpenURL","then","supported","Promise","reject","Error","openURL"],"mappings":";;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAMC,KAAN;AAAA,SAAgB,OAAOD,GAAP,KAAe,QAAf,IAA2BA,GAAG,IAAIC,KAAlC,IAA2CD,GAAG,IAAI,CAAC,CAAD,GAAKC,KAAvE;AAAA,CAAtB;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,MAAM;AAAA,SAC/BJ,aAAa,CAACI,MAAM,CAACC,QAAR,EAAkB,EAAlB,CAAb,IAAsCL,aAAa,CAACI,MAAM,CAACE,SAAR,EAAmB,GAAnB,CADpB;AAAA,CAAjC;;AAGA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAiB;AAAA,MAAhBC,MAAgB,uEAAP,EAAO;AACjC,SAAOA,MAAM,CACVC,GADI,CACA,gBAAoB;AAAA,QAAjBC,GAAiB,QAAjBA,GAAiB;AAAA,QAAZC,KAAY,QAAZA,KAAY;AACvB,QAAMC,UAAU,GAAGC,kBAAkB,CAACH,GAAD,CAArC;AACA,QAAMI,YAAY,GAAGD,kBAAkB,CAACF,KAAD,CAAvC;AACA,WAAUC,UAAV,SAAwBE,YAAxB;AACD,GALI,EAMJC,IANI,CAMC,GAND,CAAP;AAOD,CARD;;AAUA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAoB;AAAA,MAAnBC,SAAmB,uEAAP,EAAO;;AACvC,MAAIA,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,WAAO,EAAP;AACD;;AAED,MAAMV,MAAM,GAAGS,SAAS,CACrBR,GADY,CACR,UAAAE,KAAK;AAAA,WAAOA,KAAK,CAACN,QAAb,SAAyBM,KAAK,CAACL,SAA/B;AAAA,GADG,EAEZS,IAFY,CAEP,GAFO,CAAf;AAIA,yBAAqBP,MAArB;AACD,CAVD;;AAYA,SAASW,aAAT,GAAmF;AAAA,kFAAJ,EAAI;AAAA,MAAzDC,WAAyD,SAAzDA,WAAyD;AAAA,MAA5CC,MAA4C,SAA5CA,MAA4C;AAAA,2BAApCb,MAAoC;AAAA,MAApCA,MAAoC,6BAA3B,EAA2B;AAAA,8BAAvBS,SAAuB;AAAA,MAAvBA,SAAuB,gCAAX,EAAW;;AACjF,MAAIG,WAAW,IAAIjB,kBAAkB,CAACiB,WAAD,CAArC,EAAoD;AAClDZ,IAAAA,MAAM,CAACc,IAAP,CAAY;AACVZ,MAAAA,GAAG,EAAE,aADK;AAEVC,MAAAA,KAAK,EAAKS,WAAW,CAACf,QAAjB,SAA6Be,WAAW,CAACd;AAFpC,KAAZ;AAID;;AAED,MAAIe,MAAM,IAAIlB,kBAAkB,CAACkB,MAAD,CAAhC,EAA0C;AACxCb,IAAAA,MAAM,CAACc,IAAP,CAAY;AACVZ,MAAAA,GAAG,EAAE,QADK;AAEVC,MAAAA,KAAK,EAAKU,MAAM,CAAChB,QAAZ,SAAwBgB,MAAM,CAACf;AAF1B,KAAZ;AAID;;AAED,MAAMiB,GAAG,+CAA6ChB,SAAS,CAC7DC,MAD6D,CAAtD,GAELQ,YAAY,CAACC,SAAD,CAFhB;AAGA,SAAOO,OAAO,CAACC,UAAR,CAAmBF,GAAnB,EAAwBG,IAAxB,CAA6B,UAAAC,SAAS,EAAI;AAC/C,QAAI,CAACA,SAAL,EAAgB;AACd,aAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,8BAAqCP,GAArC,CAAf,CAAP;AACD,KAFD,MAEO;AACL,aAAOC,OAAO,CAACO,OAAR,CAAgBR,GAAhB,CAAP;AACD;AACF,GANM,CAAP;AAOD;;AAED,eAAeJ,aAAf","sourcesContent":["import { Linking } from 'react-native'\n\nconst isValidLatLng = (num, range) => typeof num === 'number' && num <= range && num >= -1 * range\n\nconst isValidCoordinates = coords =>\n  isValidLatLng(coords.latitude, 90) && isValidLatLng(coords.longitude, 180)\n\nconst getParams = (params = []) => {\n  return params\n    .map(({ key, value }) => {\n      const encodedKey = encodeURIComponent(key)\n      const encodedValue = encodeURIComponent(value)\n      return `${encodedKey}=${encodedValue}`\n    })\n    .join('&')\n}\n\nconst getWaypoints = (waypoints = []) => {\n  if (waypoints.length === 0) {\n    return ''\n  }\n\n  const params = waypoints\n    .map(value => `${value.latitude},${value.longitude}`)\n    .join('|')\n\n  return `&waypoints=${params}`\n}\n\nfunction getDirections ({ destination, source, params = [], waypoints = [] } = {}) {\n  if (destination && isValidCoordinates(destination)) {\n    params.push({\n      key: 'destination',\n      value: `${destination.latitude},${destination.longitude}`\n    })\n  }\n\n  if (source && isValidCoordinates(source)) {\n    params.push({\n      key: 'origin',\n      value: `${source.latitude},${source.longitude}`\n    })\n  }\n\n  const url = `https://www.google.com/maps/dir/?api=1&${getParams(\n    params\n  )}${getWaypoints(waypoints)}`\n  return Linking.canOpenURL(url).then(supported => {\n    if (!supported) {\n      return Promise.reject(new Error(`Could not open the url: ${url}`))\n    } else {\n      return Linking.openURL(url)\n    }\n  })\n}\n\nexport default getDirections\n"]},"metadata":{},"sourceType":"module"}