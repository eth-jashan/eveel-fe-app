{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport api_utils from \"../../../assets/api\";\nimport endPoints from \"../../../assets/endpoints\";\nimport PumpStation from \"../../../model/pumpStationModel\";\nexport var FETCH_STATION = \"FETCH_STATION\";\nexport var fetch_station = function fetch_station() {\n  return function _callee(dispatch) {\n    var response, resData, stationList, key;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"\" + api_utils.baseURL_Demo + endPoints.station_details + \".json?\"));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            resData = _context.sent;\n            stationList = [];\n\n            for (key in resData) {\n              stationList.push(new PumpStation(key, resData[key].Address, resData[key].Lat, resData[key].Long, resData[key].Station));\n            }\n\n            dispatch({\n              type: FETCH_STATION,\n              list: stationList\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/saahithshetty/ReactNative/Eveels-2/source/Store/action/station.js"],"names":["api_utils","endPoints","PumpStation","FETCH_STATION","fetch_station","dispatch","fetch","baseURL_Demo","station_details","response","json","resData","stationList","key","push","Address","Lat","Long","Station","type","list"],"mappings":";AAAA,OAAOA,SAAP;AACA,OAAOC,SAAP;AACA,OAAOC,WAAP;AACA,OAAO,IAAMC,aAAa,GAAG,eAAtB;AAEP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjC,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACkBC,KAAK,MACvBN,SAAS,CAACO,YADa,GACEN,SAAS,CAACO,eADZ,YADvB;;AAAA;AACCC,YAAAA,QADD;AAAA;AAAA,6CAIiBA,QAAQ,CAACC,IAAT,EAJjB;;AAAA;AAICC,YAAAA,OAJD;AAKCC,YAAAA,WALD,GAKe,EALf;;AAML,iBAAWC,GAAX,IAAkBF,OAAlB,EAA2B;AACzBC,cAAAA,WAAW,CAACE,IAAZ,CACE,IAAIZ,WAAJ,CACEW,GADF,EAEEF,OAAO,CAACE,GAAD,CAAP,CAAaE,OAFf,EAGEJ,OAAO,CAACE,GAAD,CAAP,CAAaG,GAHf,EAIEL,OAAO,CAACE,GAAD,CAAP,CAAaI,IAJf,EAKEN,OAAO,CAACE,GAAD,CAAP,CAAaK,OALf,CADF;AASD;;AACDb,YAAAA,QAAQ,CAAC;AAAEc,cAAAA,IAAI,EAAEhB,aAAR;AAAuBiB,cAAAA,IAAI,EAAER;AAA7B,aAAD,CAAR;;AAjBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAmBD,CApBM","sourcesContent":["import api_utils from \"../../../assets/api\";\nimport endPoints from \"../../../assets/endpoints\";\nimport PumpStation from \"../../../model/pumpStationModel\";\nexport const FETCH_STATION = \"FETCH_STATION\";\n\nexport const fetch_station = () => {\n  return async (dispatch) => {\n    const response = await fetch(\n      `${api_utils.baseURL_Demo}${endPoints.station_details}.json?`\n    );\n    const resData = await response.json();\n    const stationList = [];\n    for (const key in resData) {\n      stationList.push(\n        new PumpStation(\n          key,\n          resData[key].Address,\n          resData[key].Lat,\n          resData[key].Long,\n          resData[key].Station\n        )\n      );\n    }\n    dispatch({ type: FETCH_STATION, list: stationList });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}