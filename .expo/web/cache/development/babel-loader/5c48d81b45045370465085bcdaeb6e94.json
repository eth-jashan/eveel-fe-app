{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport api_utils from \"../../../assets/api\";\nimport endPoints from \"../../../assets/endpoints\";\nimport featureModel from \"../../../model/FeatureModel\";\nexport var FETCH_FEATURE = \"FETCH_FEATURE\";\nexport var fetchfeature = function fetchfeature() {\n  return function _callee(dispatch) {\n    var response, resData, featureList, key;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"\" + api_utils.baseURL_Demo + endPoints.feature_details + \".json?\"));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            resData = _context.sent;\n            featureList = [];\n\n            for (key in resData) {\n              featureList.push(new featureModel(resData[key].name, resData[key].feature, resData[key].image, resData[key].carid));\n            }\n\n            dispatch({\n              type: FETCH_FEATURE,\n              data: featureList\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/saahithshetty/ReactNative/Eveels-2/source/Store/action/feature.js"],"names":["api_utils","endPoints","featureModel","FETCH_FEATURE","fetchfeature","dispatch","fetch","baseURL_Demo","feature_details","response","json","resData","featureList","key","push","name","feature","image","carid","type","data"],"mappings":";AAAA,OAAOA,SAAP;AACA,OAAOC,SAAP;AACA,OAAOC,YAAP;AAEA,OAAO,IAAMC,aAAa,GAAG,eAAtB;AAEP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAChC,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACkBC,KAAK,MACvBN,SAAS,CAACO,YADa,GACEN,SAAS,CAACO,eADZ,YADvB;;AAAA;AACCC,YAAAA,QADD;AAAA;AAAA,6CAIiBA,QAAQ,CAACC,IAAT,EAJjB;;AAAA;AAICC,YAAAA,OAJD;AAKCC,YAAAA,WALD,GAKe,EALf;;AAML,iBAAWC,GAAX,IAAkBF,OAAlB,EAA2B;AAEzBC,cAAAA,WAAW,CAACE,IAAZ,CACE,IAAIZ,YAAJ,CACES,OAAO,CAACE,GAAD,CAAP,CAAaE,IADf,EAEEJ,OAAO,CAACE,GAAD,CAAP,CAAaG,OAFf,EAGEL,OAAO,CAACE,GAAD,CAAP,CAAaI,KAHf,EAIEN,OAAO,CAACE,GAAD,CAAP,CAAaK,KAJf,CADF;AAQD;;AAEDb,YAAAA,QAAQ,CAAC;AAAEc,cAAAA,IAAI,EAAEhB,aAAR;AAAuBiB,cAAAA,IAAI,EAAER;AAA7B,aAAD,CAAR;;AAlBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAoBD,CArBM","sourcesContent":["import api_utils from \"../../../assets/api\";\nimport endPoints from \"../../../assets/endpoints\";\nimport featureModel from \"../../../model/FeatureModel\";\n\nexport const FETCH_FEATURE = \"FETCH_FEATURE\";\n\nexport const fetchfeature = () => {\n  return async (dispatch) => {\n    const response = await fetch(\n      `${api_utils.baseURL_Demo}${endPoints.feature_details}.json?`\n    );\n    const resData = await response.json();\n    const featureList = [];\n    for (const key in resData) {\n      //console.log(\"key===>\", resData[key]);\n      featureList.push(\n        new featureModel(\n          resData[key].name,\n          resData[key].feature,\n          resData[key].image,\n          resData[key].carid\n        )\n      );\n    }\n    //console.log(\"Feature===>\", featureList);\n    dispatch({ type: FETCH_FEATURE, data: featureList });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}