package expo.modules.updates.selectionpolicy;

import java.lang.System;

/**
 * LoaderSelectionPolicy which decides whether or not to load an update, taking filters into
 * account. Returns true (should load the update) if we don't have an existing newer update that
 * matches the given manifest filters.
 */
@kotlin.Metadata(mv = {1, 4, 1}, bv = {1, 0, 3}, k = 1, d1 = {"\u0000 \n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J&\u0010\u0003\u001a\u00020\u00042\b\u0010\u0005\u001a\u0004\u0018\u00010\u00062\b\u0010\u0007\u001a\u0004\u0018\u00010\u00062\b\u0010\b\u001a\u0004\u0018\u00010\tH\u0016\u00a8\u0006\n"}, d2 = {"Lexpo/modules/updates/selectionpolicy/LoaderSelectionPolicyFilterAware;", "Lexpo/modules/updates/selectionpolicy/LoaderSelectionPolicy;", "()V", "shouldLoadNewUpdate", "", "newUpdate", "Lexpo/modules/updates/db/entity/UpdateEntity;", "launchedUpdate", "filters", "Lorg/json/JSONObject;", "expo-updates_debug"})
public final class LoaderSelectionPolicyFilterAware implements expo.modules.updates.selectionpolicy.LoaderSelectionPolicy {
    
    @java.lang.Override()
    public boolean shouldLoadNewUpdate(@org.jetbrains.annotations.Nullable()
    expo.modules.updates.db.entity.UpdateEntity newUpdate, @org.jetbrains.annotations.Nullable()
    expo.modules.updates.db.entity.UpdateEntity launchedUpdate, @org.jetbrains.annotations.Nullable()
    org.json.JSONObject filters) {
        return false;
    }
    
    public LoaderSelectionPolicyFilterAware() {
        super();
    }
}