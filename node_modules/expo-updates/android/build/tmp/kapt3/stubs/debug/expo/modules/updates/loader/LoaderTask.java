package expo.modules.updates.loader;

import java.lang.System;

@kotlin.Metadata(mv = {1, 4, 1}, bv = {1, 0, 3}, k = 1, d1 = {"\u0000f\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0007\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\f\u0018\u0000 /2\u00020\u0001:\u0004-./0B7\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u0012\b\u0010\u0006\u001a\u0004\u0018\u00010\u0007\u0012\u0006\u0010\b\u001a\u00020\t\u0012\u0006\u0010\n\u001a\u00020\u000b\u0012\u0006\u0010\f\u001a\u00020\r\u00a2\u0006\u0002\u0010\u000eJ\u0018\u0010\u001c\u001a\u00020\u001d2\u000e\u0010\u001e\u001a\n\u0018\u00010\u001fj\u0004\u0018\u0001` H\u0002J\u0018\u0010!\u001a\u00020\u001d2\u0006\u0010\"\u001a\u00020#2\u0006\u0010$\u001a\u00020%H\u0002J\u0018\u0010&\u001a\u00020\u001d2\u0006\u0010\"\u001a\u00020#2\u0006\u0010\'\u001a\u00020%H\u0002J\b\u0010(\u001a\u00020\u001dH\u0002J\b\u0010)\u001a\u00020\u001dH\u0002J\u000e\u0010*\u001a\u00020\u001d2\u0006\u0010\"\u001a\u00020#J\b\u0010+\u001a\u00020\u001dH\u0002J\b\u0010,\u001a\u00020\u001dH\u0002R\u000e\u0010\f\u001a\u00020\rX\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0010\u0010\u000f\u001a\u0004\u0018\u00010\u0010X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0002\u001a\u00020\u0003X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0004\u001a\u00020\u0005X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0010\u0010\u0006\u001a\u0004\u0018\u00010\u0007X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u000e\u0010\b\u001a\u00020\tX\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0010\u0010\u0011\u001a\u0004\u0018\u00010\u0010X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0012\u001a\u00020\u0013X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0014\u001a\u00020\u0015X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0016\u001a\u00020\u0015X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u001e\u0010\u0018\u001a\u00020\u00152\u0006\u0010\u0017\u001a\u00020\u0015@BX\u0086\u000e\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0018\u0010\u0019R\u000e\u0010\u001a\u001a\u00020\u0015X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010\n\u001a\u00020\u000bX\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u001b\u001a\u00020\u0015X\u0082\u000e\u00a2\u0006\u0002\n\u0000\u00a8\u00061"}, d2 = {"Lexpo/modules/updates/loader/LoaderTask;", "", "configuration", "Lexpo/modules/updates/UpdatesConfiguration;", "databaseHolder", "Lexpo/modules/updates/db/DatabaseHolder;", "directory", "Ljava/io/File;", "fileDownloader", "Lexpo/modules/updates/loader/FileDownloader;", "selectionPolicy", "Lexpo/modules/updates/selectionpolicy/SelectionPolicy;", "callback", "Lexpo/modules/updates/loader/LoaderTask$LoaderTaskCallback;", "(Lexpo/modules/updates/UpdatesConfiguration;Lexpo/modules/updates/db/DatabaseHolder;Ljava/io/File;Lexpo/modules/updates/loader/FileDownloader;Lexpo/modules/updates/selectionpolicy/SelectionPolicy;Lexpo/modules/updates/loader/LoaderTask$LoaderTaskCallback;)V", "candidateLauncher", "Lexpo/modules/updates/launcher/Launcher;", "finalizedLauncher", "handlerThread", "Landroid/os/HandlerThread;", "hasLaunched", "", "isReadyToLaunch", "<set-?>", "isRunning", "()Z", "isUpToDate", "timeoutFinished", "finish", "", "e", "Ljava/lang/Exception;", "Lkotlin/Exception;", "launchFallbackUpdateFromDisk", "context", "Landroid/content/Context;", "diskUpdateCallback", "Lexpo/modules/updates/loader/LoaderTask$Callback;", "launchRemoteUpdateInBackground", "remoteUpdateCallback", "maybeFinish", "runReaper", "start", "stopTimer", "timeout", "BackgroundUpdateStatus", "Callback", "Companion", "LoaderTaskCallback", "expo-updates_debug"})
public final class LoaderTask {
    private boolean isRunning = false;
    private boolean isReadyToLaunch = false;
    private boolean timeoutFinished = false;
    private boolean hasLaunched = false;
    private boolean isUpToDate = false;
    private final android.os.HandlerThread handlerThread = null;
    private expo.modules.updates.launcher.Launcher candidateLauncher;
    private expo.modules.updates.launcher.Launcher finalizedLauncher;
    private final expo.modules.updates.UpdatesConfiguration configuration = null;
    private final expo.modules.updates.db.DatabaseHolder databaseHolder = null;
    private final java.io.File directory = null;
    private final expo.modules.updates.loader.FileDownloader fileDownloader = null;
    private final expo.modules.updates.selectionpolicy.SelectionPolicy selectionPolicy = null;
    private final expo.modules.updates.loader.LoaderTask.LoaderTaskCallback callback = null;
    private static final java.lang.String TAG = null;
    @org.jetbrains.annotations.NotNull()
    public static final expo.modules.updates.loader.LoaderTask.Companion Companion = null;
    
    public final boolean isRunning() {
        return false;
    }
    
    public final void start(@org.jetbrains.annotations.NotNull()
    android.content.Context context) {
    }
    
    /**
     * This method should be called at the end of the LoaderTask. Whether or not the task has
     * successfully loaded an update to launch, the timer will stop and the appropriate callback
     * function will be fired.
     */
    private final synchronized void finish(java.lang.Exception e) {
    }
    
    /**
     * This method should be called to conditionally fire the callback. If the task has successfully
     * loaded an update to launch and the timer isn't still running, the appropriate callback function
     * will be fired. If not, no callback will be fired.
     */
    private final synchronized void maybeFinish() {
    }
    
    private final synchronized void stopTimer() {
    }
    
    private final synchronized void timeout() {
    }
    
    private final void launchFallbackUpdateFromDisk(android.content.Context context, expo.modules.updates.loader.LoaderTask.Callback diskUpdateCallback) {
    }
    
    private final void launchRemoteUpdateInBackground(android.content.Context context, expo.modules.updates.loader.LoaderTask.Callback remoteUpdateCallback) {
    }
    
    private final void runReaper() {
    }
    
    public LoaderTask(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.UpdatesConfiguration configuration, @org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.DatabaseHolder databaseHolder, @org.jetbrains.annotations.Nullable()
    java.io.File directory, @org.jetbrains.annotations.NotNull()
    expo.modules.updates.loader.FileDownloader fileDownloader, @org.jetbrains.annotations.NotNull()
    expo.modules.updates.selectionpolicy.SelectionPolicy selectionPolicy, @org.jetbrains.annotations.NotNull()
    expo.modules.updates.loader.LoaderTask.LoaderTaskCallback callback) {
        super();
    }
    
    @kotlin.Metadata(mv = {1, 4, 1}, bv = {1, 0, 3}, k = 1, d1 = {"\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\u0005\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005\u00a8\u0006\u0006"}, d2 = {"Lexpo/modules/updates/loader/LoaderTask$BackgroundUpdateStatus;", "", "(Ljava/lang/String;I)V", "ERROR", "NO_UPDATE_AVAILABLE", "UPDATE_AVAILABLE", "expo-updates_debug"})
    public static enum BackgroundUpdateStatus {
        /*public static final*/ ERROR /* = new ERROR() */,
        /*public static final*/ NO_UPDATE_AVAILABLE /* = new NO_UPDATE_AVAILABLE() */,
        /*public static final*/ UPDATE_AVAILABLE /* = new UPDATE_AVAILABLE() */;
        
        BackgroundUpdateStatus() {
        }
    }
    
    @kotlin.Metadata(mv = {1, 4, 1}, bv = {1, 0, 3}, k = 1, d1 = {"\u0000>\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u00002\u00020\u0001J*\u0010\u0002\u001a\u00020\u00032\u0006\u0010\u0004\u001a\u00020\u00052\b\u0010\u0006\u001a\u0004\u0018\u00010\u00072\u000e\u0010\b\u001a\n\u0018\u00010\tj\u0004\u0018\u0001`\nH&J\u0010\u0010\u000b\u001a\u00020\f2\u0006\u0010\u0006\u001a\u00020\u0007H&J\u0014\u0010\r\u001a\u00020\u00032\n\u0010\u000e\u001a\u00060\tj\u0002`\nH&J\u0010\u0010\u000f\u001a\u00020\u00032\u0006\u0010\u0010\u001a\u00020\u0011H&J\u0018\u0010\u0012\u001a\u00020\u00032\u0006\u0010\u0013\u001a\u00020\u00142\u0006\u0010\u0015\u001a\u00020\fH&\u00a8\u0006\u0016"}, d2 = {"Lexpo/modules/updates/loader/LoaderTask$LoaderTaskCallback;", "", "onBackgroundUpdateFinished", "", "status", "Lexpo/modules/updates/loader/LoaderTask$BackgroundUpdateStatus;", "update", "Lexpo/modules/updates/db/entity/UpdateEntity;", "exception", "Ljava/lang/Exception;", "Lkotlin/Exception;", "onCachedUpdateLoaded", "", "onFailure", "e", "onRemoteUpdateManifestLoaded", "updateManifest", "Lexpo/modules/updates/manifest/UpdateManifest;", "onSuccess", "launcher", "Lexpo/modules/updates/launcher/Launcher;", "isUpToDate", "expo-updates_debug"})
    public static abstract interface LoaderTaskCallback {
        
        public abstract void onFailure(@org.jetbrains.annotations.NotNull()
        java.lang.Exception e);
        
        /**
         * This method gives the calling class a backdoor option to ignore the cached update and force
         * a remote load if it decides the cached update is not runnable. Returning false from this
         * callback will force a remote load, overriding the timeout and configuration settings for
         * whether or not to check for a remote update. Returning true from this callback will make
         * LoaderTask proceed as usual.
         */
        public abstract boolean onCachedUpdateLoaded(@org.jetbrains.annotations.NotNull()
        expo.modules.updates.db.entity.UpdateEntity update);
        
        public abstract void onRemoteUpdateManifestLoaded(@org.jetbrains.annotations.NotNull()
        expo.modules.updates.manifest.UpdateManifest updateManifest);
        
        public abstract void onSuccess(@org.jetbrains.annotations.NotNull()
        expo.modules.updates.launcher.Launcher launcher, boolean isUpToDate);
        
        public abstract void onBackgroundUpdateFinished(@org.jetbrains.annotations.NotNull()
        expo.modules.updates.loader.LoaderTask.BackgroundUpdateStatus status, @org.jetbrains.annotations.Nullable()
        expo.modules.updates.db.entity.UpdateEntity update, @org.jetbrains.annotations.Nullable()
        java.lang.Exception exception);
    }
    
    @kotlin.Metadata(mv = {1, 4, 1}, bv = {1, 0, 3}, k = 1, d1 = {"\u0000\u001c\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bb\u0018\u00002\u00020\u0001J\u0014\u0010\u0002\u001a\u00020\u00032\n\u0010\u0004\u001a\u00060\u0005j\u0002`\u0006H&J\b\u0010\u0007\u001a\u00020\u0003H&\u00a8\u0006\b"}, d2 = {"Lexpo/modules/updates/loader/LoaderTask$Callback;", "", "onFailure", "", "e", "Ljava/lang/Exception;", "Lkotlin/Exception;", "onSuccess", "expo-updates_debug"})
    static abstract interface Callback {
        
        public abstract void onFailure(@org.jetbrains.annotations.NotNull()
        java.lang.Exception e);
        
        public abstract void onSuccess();
    }
    
    @kotlin.Metadata(mv = {1, 4, 1}, bv = {1, 0, 3}, k = 1, d1 = {"\u0000\u0014\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0002\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002R\u0016\u0010\u0003\u001a\n \u0005*\u0004\u0018\u00010\u00040\u0004X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u00a8\u0006\u0006"}, d2 = {"Lexpo/modules/updates/loader/LoaderTask$Companion;", "", "()V", "TAG", "", "kotlin.jvm.PlatformType", "expo-updates_debug"})
    public static final class Companion {
        
        private Companion() {
            super();
        }
    }
}