package expo.modules.updates;

import java.lang.System;

@kotlin.Metadata(mv = {1, 4, 1}, bv = {1, 0, 3}, k = 1, d1 = {"\u0000\u00bc\u0001\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u000b\n\u0002\b\b\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\r\u0018\u0000 f2\u00020\u0001:\u0001fB\u0017\b\u0002\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u00a2\u0006\u0002\u0010\u0006J\u0006\u0010O\u001a\u00020PJ\b\u0010Q\u001a\u00020RH\u0002J\u000e\u0010S\u001a\u00020R2\u0006\u0010\u0002\u001a\u00020\u0003J\b\u0010T\u001a\u00020RH\u0002J\u000e\u0010U\u001a\u00020R2\u0006\u0010V\u001a\u00020WJ\u0016\u0010X\u001a\u00020R2\u0006\u0010\u0002\u001a\u00020\u00032\u0006\u0010Y\u001a\u00020ZJ \u0010X\u001a\u00020R2\u0006\u0010\u0002\u001a\u00020\u00032\u0006\u0010[\u001a\u00020\u001c2\u0006\u0010Y\u001a\u00020ZH\u0002J\u0006\u0010\\\u001a\u00020RJ\u0006\u0010]\u001a\u00020RJ\u0006\u0010^\u001a\u00020RJ\u000e\u0010_\u001a\u00020R2\u0006\u00107\u001a\u00020\u0014J\u0010\u0010`\u001a\u00020R2\b\u0010(\u001a\u0004\u0018\u00010)J\u0010\u0010a\u001a\u00020R2\b\u00107\u001a\u0004\u0018\u00010\u0014J\u000e\u0010b\u001a\u00020R2\u0006\u00102\u001a\u000204J\u0010\u0010c\u001a\u00020R2\u0006\u0010d\u001a\u000206H\u0002J\u000e\u0010e\u001a\u00020R2\u0006\u0010\u0002\u001a\u00020\u0003R\u0013\u0010\u0007\u001a\u0004\u0018\u00010\b8F\u00a2\u0006\u0006\u001a\u0004\b\t\u0010\nR\u000e\u0010\u000b\u001a\u00020\fX\u0082.\u00a2\u0006\u0002\n\u0000R\u000e\u0010\r\u001a\u00020\u000eX\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0011\u0010\u000f\u001a\u00020\u0010\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0011\u0010\u0012R\u000e\u0010\u0013\u001a\u00020\u0014X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0015\u001a\u00020\u0016X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0011\u0010\u0017\u001a\u00020\u0018\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0019\u0010\u001aR\u001e\u0010\u001d\u001a\u00020\u001c2\u0006\u0010\u001b\u001a\u00020\u001c@BX\u0086\u000e\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001d\u0010\u001eR\u000e\u0010\u001f\u001a\u00020\u001cX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010 \u001a\u00020\u001cX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0011\u0010!\u001a\u00020\u001c8F\u00a2\u0006\u0006\u001a\u0004\b!\u0010\u001eR\u0013\u0010\"\u001a\u0004\u0018\u00010\b8F\u00a2\u0006\u0006\u001a\u0004\b#\u0010\nR\u0013\u0010$\u001a\u0004\u0018\u00010%8F\u00a2\u0006\u0006\u001a\u0004\b&\u0010\'R\u0010\u0010(\u001a\u0004\u0018\u00010)X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0010\u0010*\u001a\u0004\u0018\u00010+X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u001f\u0010,\u001a\u0010\u0012\u0004\u0012\u00020.\u0012\u0004\u0012\u00020\b\u0018\u00010-8F\u00a2\u0006\u0006\u001a\u0004\b/\u00100R\u0010\u00101\u001a\u0004\u0018\u00010\u0014X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0016\u00102\u001a\n\u0012\u0004\u0012\u000204\u0018\u000103X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u00105\u001a\u000206X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0011\u00107\u001a\u00020\u00148F\u00a2\u0006\u0006\u001a\u0004\b8\u00109R\u0013\u0010:\u001a\u0004\u0018\u00010;8F\u00a2\u0006\u0006\u001a\u0004\b<\u0010=R\u001a\u0010\u0004\u001a\u00020\u0005X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b>\u0010?\"\u0004\b@\u0010AR\u001c\u0010B\u001a\u0004\u0018\u00010CX\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\bD\u0010E\"\u0004\bF\u0010GR\"\u0010H\u001a\n\u0018\u00010Ij\u0004\u0018\u0001`JX\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\bK\u0010L\"\u0004\bM\u0010N\u00a8\u0006g"}, d2 = {"Lexpo/modules/updates/UpdatesController;", "", "context", "Landroid/content/Context;", "updatesConfiguration", "Lexpo/modules/updates/UpdatesConfiguration;", "(Landroid/content/Context;Lexpo/modules/updates/UpdatesConfiguration;)V", "bundleAssetName", "", "getBundleAssetName", "()Ljava/lang/String;", "databaseHandler", "Landroid/os/Handler;", "databaseHandlerThread", "Landroid/os/HandlerThread;", "databaseHolder", "Lexpo/modules/updates/db/DatabaseHolder;", "getDatabaseHolder", "()Lexpo/modules/updates/db/DatabaseHolder;", "defaultSelectionPolicy", "Lexpo/modules/updates/selectionpolicy/SelectionPolicy;", "errorRecovery", "Lexpo/modules/updates/errorrecovery/ErrorRecovery;", "fileDownloader", "Lexpo/modules/updates/loader/FileDownloader;", "getFileDownloader", "()Lexpo/modules/updates/loader/FileDownloader;", "<set-?>", "", "isEmergencyLaunch", "()Z", "isLoaderTaskFinished", "isStarted", "isUsingEmbeddedAssets", "launchAssetFile", "getLaunchAssetFile", "launchedUpdate", "Lexpo/modules/updates/db/entity/UpdateEntity;", "getLaunchedUpdate", "()Lexpo/modules/updates/db/entity/UpdateEntity;", "launcher", "Lexpo/modules/updates/launcher/Launcher;", "loaderTask", "Lexpo/modules/updates/loader/LoaderTask;", "localAssetFiles", "", "Lexpo/modules/updates/db/entity/AssetEntity;", "getLocalAssetFiles", "()Ljava/util/Map;", "mSelectionPolicy", "reactNativeHost", "Ljava/lang/ref/WeakReference;", "Lcom/facebook/react/ReactNativeHost;", "remoteLoadStatus", "Lexpo/modules/updates/errorrecovery/ErrorRecoveryDelegate$RemoteLoadStatus;", "selectionPolicy", "getSelectionPolicy", "()Lexpo/modules/updates/selectionpolicy/SelectionPolicy;", "updateUrl", "Landroid/net/Uri;", "getUpdateUrl", "()Landroid/net/Uri;", "getUpdatesConfiguration", "()Lexpo/modules/updates/UpdatesConfiguration;", "setUpdatesConfiguration", "(Lexpo/modules/updates/UpdatesConfiguration;)V", "updatesDirectory", "Ljava/io/File;", "getUpdatesDirectory", "()Ljava/io/File;", "setUpdatesDirectory", "(Ljava/io/File;)V", "updatesDirectoryException", "Ljava/lang/Exception;", "Lkotlin/Exception;", "getUpdatesDirectoryException", "()Ljava/lang/Exception;", "setUpdatesDirectoryException", "(Ljava/lang/Exception;)V", "getDatabase", "Lexpo/modules/updates/db/UpdatesDatabase;", "initializeDatabaseHandler", "", "initializeErrorRecovery", "notifyController", "onDidCreateReactInstanceManager", "reactInstanceManager", "Lcom/facebook/react/ReactInstanceManager;", "relaunchReactApplication", "callback", "Lexpo/modules/updates/launcher/Launcher$LauncherCallback;", "shouldRunReaper", "releaseDatabase", "resetSelectionPolicyToDefault", "runReaper", "setDefaultSelectionPolicy", "setLauncher", "setNextSelectionPolicy", "setReactNativeHost", "setRemoteLoadStatus", "status", "start", "Companion", "expo-updates_debug"})
public final class UpdatesController {
    private java.lang.ref.WeakReference<com.facebook.react.ReactNativeHost> reactNativeHost;
    @org.jetbrains.annotations.Nullable()
    private java.io.File updatesDirectory;
    @org.jetbrains.annotations.Nullable()
    private java.lang.Exception updatesDirectoryException;
    private expo.modules.updates.launcher.Launcher launcher;
    @org.jetbrains.annotations.NotNull()
    private final expo.modules.updates.db.DatabaseHolder databaseHolder = null;
    private final android.os.HandlerThread databaseHandlerThread = null;
    private android.os.Handler databaseHandler;
    private boolean isStarted = false;
    private expo.modules.updates.loader.LoaderTask loaderTask;
    private expo.modules.updates.errorrecovery.ErrorRecoveryDelegate.RemoteLoadStatus remoteLoadStatus = expo.modules.updates.errorrecovery.ErrorRecoveryDelegate.RemoteLoadStatus.IDLE;
    private expo.modules.updates.selectionpolicy.SelectionPolicy mSelectionPolicy;
    private expo.modules.updates.selectionpolicy.SelectionPolicy defaultSelectionPolicy;
    @org.jetbrains.annotations.NotNull()
    private final expo.modules.updates.loader.FileDownloader fileDownloader = null;
    private final expo.modules.updates.errorrecovery.ErrorRecovery errorRecovery = null;
    private boolean isLoaderTaskFinished = false;
    private boolean isEmergencyLaunch = false;
    @org.jetbrains.annotations.NotNull()
    private expo.modules.updates.UpdatesConfiguration updatesConfiguration;
    private static final java.lang.String TAG = null;
    private static final java.lang.String UPDATE_AVAILABLE_EVENT = "updateAvailable";
    private static final java.lang.String UPDATE_NO_UPDATE_AVAILABLE_EVENT = "noUpdateAvailable";
    private static final java.lang.String UPDATE_ERROR_EVENT = "error";
    private static expo.modules.updates.UpdatesController singletonInstance;
    @org.jetbrains.annotations.NotNull()
    public static final expo.modules.updates.UpdatesController.Companion Companion = null;
    
    @org.jetbrains.annotations.Nullable()
    public final java.io.File getUpdatesDirectory() {
        return null;
    }
    
    public final void setUpdatesDirectory(@org.jetbrains.annotations.Nullable()
    java.io.File p0) {
    }
    
    @org.jetbrains.annotations.Nullable()
    public final java.lang.Exception getUpdatesDirectoryException() {
        return null;
    }
    
    public final void setUpdatesDirectoryException(@org.jetbrains.annotations.Nullable()
    java.lang.Exception p0) {
    }
    
    @org.jetbrains.annotations.NotNull()
    public final expo.modules.updates.db.DatabaseHolder getDatabaseHolder() {
        return null;
    }
    
    private final void initializeDatabaseHandler() {
    }
    
    @org.jetbrains.annotations.NotNull()
    public final expo.modules.updates.loader.FileDownloader getFileDownloader() {
        return null;
    }
    
    private final void setRemoteLoadStatus(expo.modules.updates.errorrecovery.ErrorRecoveryDelegate.RemoteLoadStatus status) {
    }
    
    public final boolean isEmergencyLaunch() {
        return false;
    }
    
    public final void onDidCreateReactInstanceManager(@org.jetbrains.annotations.NotNull()
    com.facebook.react.ReactInstanceManager reactInstanceManager) {
    }
    
    /**
     * If UpdatesController.initialize() is not provided with a [ReactApplication], this method
     * can be used to set a [ReactNativeHost] on the class. This is optional, but required in
     * order for `Updates.reload()` and some Updates module events to work.
     * @param reactNativeHost the ReactNativeHost of the application running the Updates module
     */
    public final void setReactNativeHost(@org.jetbrains.annotations.NotNull()
    com.facebook.react.ReactNativeHost reactNativeHost) {
    }
    
    @org.jetbrains.annotations.Nullable()
    public final synchronized java.lang.String getLaunchAssetFile() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable()
    public final java.lang.String getBundleAssetName() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable()
    public final java.util.Map<expo.modules.updates.db.entity.AssetEntity, java.lang.String> getLocalAssetFiles() {
        return null;
    }
    
    public final boolean isUsingEmbeddedAssets() {
        return false;
    }
    
    @org.jetbrains.annotations.NotNull()
    public final expo.modules.updates.db.UpdatesDatabase getDatabase() {
        return null;
    }
    
    public final void releaseDatabase() {
    }
    
    @org.jetbrains.annotations.Nullable()
    public final android.net.Uri getUpdateUrl() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable()
    public final expo.modules.updates.db.entity.UpdateEntity getLaunchedUpdate() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull()
    public final expo.modules.updates.selectionpolicy.SelectionPolicy getSelectionPolicy() {
        return null;
    }
    
    /**
     * For external modules that want to modify the selection policy used at runtime.
     *
     * This method does not provide any guarantees about how long the provided selection policy will
     * persist; sometimes expo-updates will reset the selection policy in situations where it makes
     * sense to have explicit control (e.g. if the developer/user has programmatically fetched an
     * update, expo-updates will reset the selection policy so the new update is launched on th
     * next reload).
     * @param selectionPolicy The SelectionPolicy to use next, until overridden by expo-updates
     */
    public final void setNextSelectionPolicy(@org.jetbrains.annotations.Nullable()
    expo.modules.updates.selectionpolicy.SelectionPolicy selectionPolicy) {
    }
    
    public final void resetSelectionPolicyToDefault() {
    }
    
    public final void setDefaultSelectionPolicy(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.selectionpolicy.SelectionPolicy selectionPolicy) {
    }
    
    public final void setLauncher(@org.jetbrains.annotations.Nullable()
    expo.modules.updates.launcher.Launcher launcher) {
    }
    
    /**
     * Starts the update process to launch a previously-loaded update and (if configured to do so)
     * check for a new update from the server. This method should be called as early as possible in
     * the application's lifecycle.
     * @param context the base context of the application, ideally a [ReactApplication]
     */
    public final synchronized void start(@org.jetbrains.annotations.NotNull()
    android.content.Context context) {
    }
    
    private final synchronized void notifyController() {
    }
    
    public final void initializeErrorRecovery(@org.jetbrains.annotations.NotNull()
    android.content.Context context) {
    }
    
    public final void runReaper() {
    }
    
    public final void relaunchReactApplication(@org.jetbrains.annotations.NotNull()
    android.content.Context context, @org.jetbrains.annotations.NotNull()
    expo.modules.updates.launcher.Launcher.LauncherCallback callback) {
    }
    
    private final void relaunchReactApplication(android.content.Context context, boolean shouldRunReaper, expo.modules.updates.launcher.Launcher.LauncherCallback callback) {
    }
    
    @org.jetbrains.annotations.NotNull()
    public final expo.modules.updates.UpdatesConfiguration getUpdatesConfiguration() {
        return null;
    }
    
    public final void setUpdatesConfiguration(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.UpdatesConfiguration p0) {
    }
    
    private UpdatesController(android.content.Context context, expo.modules.updates.UpdatesConfiguration updatesConfiguration) {
        super();
    }
    
    @org.jetbrains.annotations.NotNull()
    public static final expo.modules.updates.UpdatesController getInstance() {
        return null;
    }
    
    public static final void initializeWithoutStarting(@org.jetbrains.annotations.NotNull()
    android.content.Context context) {
    }
    
    /**
     * Initializes the UpdatesController singleton. This should be called as early as possible in the
     * application's lifecycle.
     * @param context the base context of the application, ideally a [ReactApplication]
     */
    public static final void initialize(@org.jetbrains.annotations.NotNull()
    android.content.Context context) {
    }
    
    /**
     * Initializes the UpdatesController singleton. This should be called as early as possible in the
     * application's lifecycle. Use this method to set or override configuration values at runtime
     * rather than from AndroidManifest.xml.
     * @param context the base context of the application, ideally a [ReactApplication]
     */
    public static final void initialize(@org.jetbrains.annotations.NotNull()
    android.content.Context context, @org.jetbrains.annotations.NotNull()
    java.util.Map<java.lang.String, ? extends java.lang.Object> configuration) {
    }
    
    @kotlin.Metadata(mv = {1, 4, 1}, bv = {1, 0, 3}, k = 1, d1 = {"\u00000\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\b\u0002\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002J\u0010\u0010\u000f\u001a\u00020\u00102\u0006\u0010\u0011\u001a\u00020\u0012H\u0007J$\u0010\u000f\u001a\u00020\u00102\u0006\u0010\u0011\u001a\u00020\u00122\u0012\u0010\u0013\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00010\u0014H\u0007J\u0010\u0010\u0015\u001a\u00020\u00102\u0006\u0010\u0011\u001a\u00020\u0012H\u0007R\u0016\u0010\u0003\u001a\n \u0005*\u0004\u0018\u00010\u00040\u0004X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0006\u001a\u00020\u0004X\u0082T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0007\u001a\u00020\u0004X\u0082T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\b\u001a\u00020\u0004X\u0082T\u00a2\u0006\u0002\n\u0000R\u001a\u0010\t\u001a\u00020\n8FX\u0087\u0004\u00a2\u0006\f\u0012\u0004\b\u000b\u0010\u0002\u001a\u0004\b\f\u0010\rR\u0010\u0010\u000e\u001a\u0004\u0018\u00010\nX\u0082\u000e\u00a2\u0006\u0002\n\u0000\u00a8\u0006\u0016"}, d2 = {"Lexpo/modules/updates/UpdatesController$Companion;", "", "()V", "TAG", "", "kotlin.jvm.PlatformType", "UPDATE_AVAILABLE_EVENT", "UPDATE_ERROR_EVENT", "UPDATE_NO_UPDATE_AVAILABLE_EVENT", "instance", "Lexpo/modules/updates/UpdatesController;", "getInstance$annotations", "getInstance", "()Lexpo/modules/updates/UpdatesController;", "singletonInstance", "initialize", "", "context", "Landroid/content/Context;", "configuration", "", "initializeWithoutStarting", "expo-updates_debug"})
    public static final class Companion {
        
        @java.lang.Deprecated()
        public static void getInstance$annotations() {
        }
        
        @org.jetbrains.annotations.NotNull()
        public final expo.modules.updates.UpdatesController getInstance() {
            return null;
        }
        
        public final void initializeWithoutStarting(@org.jetbrains.annotations.NotNull()
        android.content.Context context) {
        }
        
        /**
         * Initializes the UpdatesController singleton. This should be called as early as possible in the
         * application's lifecycle.
         * @param context the base context of the application, ideally a [ReactApplication]
         */
        public final void initialize(@org.jetbrains.annotations.NotNull()
        android.content.Context context) {
        }
        
        /**
         * Initializes the UpdatesController singleton. This should be called as early as possible in the
         * application's lifecycle. Use this method to set or override configuration values at runtime
         * rather than from AndroidManifest.xml.
         * @param context the base context of the application, ideally a [ReactApplication]
         */
        public final void initialize(@org.jetbrains.annotations.NotNull()
        android.content.Context context, @org.jetbrains.annotations.NotNull()
        java.util.Map<java.lang.String, ? extends java.lang.Object> configuration) {
        }
        
        private Companion() {
            super();
        }
    }
}