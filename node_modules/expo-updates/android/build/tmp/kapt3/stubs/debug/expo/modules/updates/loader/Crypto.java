package expo.modules.updates.loader;

import java.lang.System;

@kotlin.Metadata(mv = {1, 4, 1}, bv = {1, 0, 3}, k = 1, d1 = {"\u0000.\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\b\u00c6\u0002\u0018\u00002\u00020\u0001:\u0001\u0011B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002J0\u0010\u0005\u001a\u00020\u00062\u0006\u0010\u0007\u001a\u00020\b2\u0006\u0010\t\u001a\u00020\u00042\u0006\u0010\n\u001a\u00020\u00042\u0006\u0010\u000b\u001a\u00020\f2\u0006\u0010\r\u001a\u00020\u000eH\u0002J&\u0010\u000f\u001a\u00020\u00062\u0006\u0010\t\u001a\u00020\u00042\u0006\u0010\n\u001a\u00020\u00042\u0006\u0010\u000b\u001a\u00020\f2\u0006\u0010\r\u001a\u00020\u000eJ \u0010\u000f\u001a\u00020\b2\u0006\u0010\u0010\u001a\u00020\u00042\u0006\u0010\t\u001a\u00020\u00042\u0006\u0010\n\u001a\u00020\u0004H\u0002R\u000e\u0010\u0003\u001a\u00020\u0004X\u0082T\u00a2\u0006\u0002\n\u0000\u00a8\u0006\u0012"}, d2 = {"Lexpo/modules/updates/loader/Crypto;", "", "()V", "PUBLIC_KEY_URL", "", "fetchPublicKeyAndVerifyPublicRSASignature", "", "isFirstAttempt", "", "plainText", "cipherText", "fileDownloader", "Lexpo/modules/updates/loader/FileDownloader;", "listener", "Lexpo/modules/updates/loader/Crypto$RSASignatureListener;", "verifyPublicRSASignature", "publicKey", "RSASignatureListener", "expo-updates_debug"})
public final class Crypto {
    private static final java.lang.String PUBLIC_KEY_URL = "https://exp.host/--/manifest-public-key";
    @org.jetbrains.annotations.NotNull()
    public static final expo.modules.updates.loader.Crypto INSTANCE = null;
    
    public final void verifyPublicRSASignature(@org.jetbrains.annotations.NotNull()
    java.lang.String plainText, @org.jetbrains.annotations.NotNull()
    java.lang.String cipherText, @org.jetbrains.annotations.NotNull()
    expo.modules.updates.loader.FileDownloader fileDownloader, @org.jetbrains.annotations.NotNull()
    expo.modules.updates.loader.Crypto.RSASignatureListener listener) {
    }
    
    private final void fetchPublicKeyAndVerifyPublicRSASignature(boolean isFirstAttempt, java.lang.String plainText, java.lang.String cipherText, expo.modules.updates.loader.FileDownloader fileDownloader, expo.modules.updates.loader.Crypto.RSASignatureListener listener) {
    }
    
    private final boolean verifyPublicRSASignature(java.lang.String publicKey, java.lang.String plainText, java.lang.String cipherText) throws java.security.NoSuchAlgorithmException, java.security.spec.InvalidKeySpecException, java.security.InvalidKeyException, java.security.SignatureException {
        return false;
    }
    
    private Crypto() {
        super();
    }
    
    @kotlin.Metadata(mv = {1, 4, 1}, bv = {1, 0, 3}, k = 1, d1 = {"\u0000$\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u00002\u00020\u0001J\u0010\u0010\u0002\u001a\u00020\u00032\u0006\u0010\u0004\u001a\u00020\u0005H&J\u001c\u0010\u0006\u001a\u00020\u00032\n\u0010\u0007\u001a\u00060\bj\u0002`\t2\u0006\u0010\n\u001a\u00020\u0005H&\u00a8\u0006\u000b"}, d2 = {"Lexpo/modules/updates/loader/Crypto$RSASignatureListener;", "", "onCompleted", "", "isValid", "", "onError", "exception", "Ljava/lang/Exception;", "Lkotlin/Exception;", "isNetworkError", "expo-updates_debug"})
    public static abstract interface RSASignatureListener {
        
        public abstract void onError(@org.jetbrains.annotations.NotNull()
        java.lang.Exception exception, boolean isNetworkError);
        
        public abstract void onCompleted(boolean isValid);
    }
}