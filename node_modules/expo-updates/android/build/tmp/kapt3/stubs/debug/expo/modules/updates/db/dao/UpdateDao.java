package expo.modules.updates.db.dao;

import java.lang.System;

@androidx.room.Dao()
@kotlin.Metadata(mv = {1, 4, 1}, bv = {1, 0, 3}, k = 1, d1 = {"\u0000F\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\t\n\u0002\b\u000f\n\u0002\u0010\u000b\n\u0002\b\u0005\b\'\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J\u0010\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0006H\'J\u0010\u0010\u0007\u001a\u00020\b2\u0006\u0010\u0005\u001a\u00020\u0006H\'J&\u0010\t\u001a\b\u0012\u0004\u0012\u00020\u000b0\n2\b\u0010\f\u001a\u0004\u0018\u00010\r2\f\u0010\u000e\u001a\b\u0012\u0004\u0012\u00020\u000f0\nH\'J\u0016\u0010\u0010\u001a\b\u0012\u0004\u0012\u00020\u000b0\n2\u0006\u0010\u0005\u001a\u00020\u0006H\'J\u0018\u0010\u0011\u001a\u00020\u00042\u0006\u0010\u0012\u001a\u00020\u000f2\u0006\u0010\u0005\u001a\u00020\u0006H\'J\u001e\u0010\u0013\u001a\u00020\u00042\f\u0010\u0014\u001a\b\u0012\u0004\u0012\u00020\u00150\n2\u0006\u0010\u0012\u001a\u00020\u000fH\'J\u0010\u0010\u0016\u001a\u00020\u00042\u0006\u0010\u0017\u001a\u00020\u000bH\'J\u0016\u0010\u0018\u001a\u00020\u00042\f\u0010\u0019\u001a\b\u0012\u0004\u0012\u00020\u000b0\nH\'J\u000e\u0010\u001a\u001a\u00020\u00042\u0006\u0010\u0017\u001a\u00020\u000bJ\u000e\u0010\u001b\u001a\u00020\u00042\u0006\u0010\u0017\u001a\u00020\u000bJ\u0010\u0010\u001c\u001a\u00020\u00042\u0006\u0010\u0017\u001a\u00020\u000bH\'J\u000e\u0010\u001d\u001a\b\u0012\u0004\u0012\u00020\u000b0\nH\'J\u0016\u0010\u001e\u001a\b\u0012\u0004\u0012\u00020\u000b0\n2\u0006\u0010\u0012\u001a\u00020\u000fH\'J\u000e\u0010\u001f\u001a\u00020\b2\u0006\u0010\u0005\u001a\u00020\u0006J\u0016\u0010 \u001a\b\u0012\u0004\u0012\u00020\u000b0\n2\b\u0010\f\u001a\u0004\u0018\u00010\rJ\u0010\u0010!\u001a\u0004\u0018\u00010\u000b2\u0006\u0010\u0005\u001a\u00020\u0006J\u000e\u0010\"\u001a\u00020\u00042\u0006\u0010\u0017\u001a\u00020\u000bJ\u000e\u0010#\u001a\u00020\u00042\u0006\u0010\u0017\u001a\u00020\u000bJ\u0018\u0010#\u001a\u00020\u00042\u0006\u0010\u0017\u001a\u00020\u000b2\u0006\u0010$\u001a\u00020%H\u0017J\u0014\u0010&\u001a\u00020\u00042\f\u0010\'\u001a\b\u0012\u0004\u0012\u00020\b0\nJ\u0016\u0010(\u001a\u00020\u00042\u0006\u0010\u0017\u001a\u00020\u000b2\u0006\u0010)\u001a\u00020\r\u00a8\u0006*"}, d2 = {"Lexpo/modules/updates/db/dao/UpdateDao;", "", "()V", "_keepUpdate", "", "id", "Ljava/util/UUID;", "_loadLaunchAsset", "Lexpo/modules/updates/db/entity/AssetEntity;", "_loadLaunchableUpdatesForProjectWithStatuses", "", "Lexpo/modules/updates/db/entity/UpdateEntity;", "scopeKey", "", "statuses", "Lexpo/modules/updates/db/enums/UpdateStatus;", "_loadUpdatesWithId", "_markUpdateWithStatus", "status", "_markUpdatesWithMissingAssets", "missingAssetIds", "", "_updateUpdate", "update", "deleteUpdates", "updates", "incrementFailedLaunchCount", "incrementSuccessfulLaunchCount", "insertUpdate", "loadAllUpdates", "loadAllUpdatesWithStatus", "loadLaunchAsset", "loadLaunchableUpdatesForScope", "loadUpdateWithId", "markUpdateAccessed", "markUpdateFinished", "hasSkippedEmbeddedAssets", "", "markUpdatesWithMissingAssets", "missingAssets", "setUpdateScopeKey", "newScopeKey", "expo-updates_debug"})
public abstract class UpdateDao {
    
    /**
     * for private use only
     * must be marked public for Room
     * so we use the underscore to discourage use
     */
    @org.jetbrains.annotations.NotNull()
    @androidx.room.Query(value = "SELECT * FROM updates WHERE scope_key = :scopeKey AND (successful_launch_count > 0 OR failed_launch_count < 1) AND status IN (:statuses);")
    public abstract java.util.List<expo.modules.updates.db.entity.UpdateEntity> _loadLaunchableUpdatesForProjectWithStatuses(@org.jetbrains.annotations.Nullable()
    java.lang.String scopeKey, @org.jetbrains.annotations.NotNull()
    java.util.List<? extends expo.modules.updates.db.enums.UpdateStatus> statuses);
    
    @org.jetbrains.annotations.NotNull()
    @androidx.room.Query(value = "SELECT * FROM updates WHERE id = :id;")
    public abstract java.util.List<expo.modules.updates.db.entity.UpdateEntity> _loadUpdatesWithId(@org.jetbrains.annotations.NotNull()
    java.util.UUID id);
    
    @org.jetbrains.annotations.NotNull()
    @androidx.room.Query(value = "SELECT assets.* FROM assets INNER JOIN updates ON updates.launch_asset_id = assets.id WHERE updates.id = :id;")
    public abstract expo.modules.updates.db.entity.AssetEntity _loadLaunchAsset(@org.jetbrains.annotations.NotNull()
    java.util.UUID id);
    
    @androidx.room.Query(value = "UPDATE updates SET keep = 1 WHERE id = :id;")
    public abstract void _keepUpdate(@org.jetbrains.annotations.NotNull()
    java.util.UUID id);
    
    @androidx.room.Query(value = "UPDATE updates SET status = :status WHERE id = :id;")
    public abstract void _markUpdateWithStatus(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.enums.UpdateStatus status, @org.jetbrains.annotations.NotNull()
    java.util.UUID id);
    
    @androidx.room.Update()
    public abstract void _updateUpdate(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.entity.UpdateEntity update);
    
    @androidx.room.Query(value = "UPDATE updates SET status = :status WHERE id IN (SELECT DISTINCT update_id FROM updates_assets WHERE asset_id IN (:missingAssetIds));")
    public abstract void _markUpdatesWithMissingAssets(@org.jetbrains.annotations.NotNull()
    java.util.List<java.lang.Long> missingAssetIds, @org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.enums.UpdateStatus status);
    
    /**
     * for public use
     */
    @org.jetbrains.annotations.NotNull()
    @androidx.room.Query(value = "SELECT * FROM updates;")
    public abstract java.util.List<expo.modules.updates.db.entity.UpdateEntity> loadAllUpdates();
    
    @org.jetbrains.annotations.NotNull()
    public final java.util.List<expo.modules.updates.db.entity.UpdateEntity> loadLaunchableUpdatesForScope(@org.jetbrains.annotations.Nullable()
    java.lang.String scopeKey) {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull()
    @androidx.room.Query(value = "SELECT * FROM updates WHERE status = :status;")
    public abstract java.util.List<expo.modules.updates.db.entity.UpdateEntity> loadAllUpdatesWithStatus(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.enums.UpdateStatus status);
    
    @org.jetbrains.annotations.Nullable()
    public final expo.modules.updates.db.entity.UpdateEntity loadUpdateWithId(@org.jetbrains.annotations.NotNull()
    java.util.UUID id) {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull()
    public final expo.modules.updates.db.entity.AssetEntity loadLaunchAsset(@org.jetbrains.annotations.NotNull()
    java.util.UUID id) {
        return null;
    }
    
    @androidx.room.Insert()
    public abstract void insertUpdate(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.entity.UpdateEntity update);
    
    public final void setUpdateScopeKey(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.entity.UpdateEntity update, @org.jetbrains.annotations.NotNull()
    java.lang.String newScopeKey) {
    }
    
    @androidx.room.Transaction()
    public void markUpdateFinished(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.entity.UpdateEntity update, boolean hasSkippedEmbeddedAssets) {
    }
    
    public final void markUpdateFinished(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.entity.UpdateEntity update) {
    }
    
    public final void markUpdateAccessed(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.entity.UpdateEntity update) {
    }
    
    public final void incrementSuccessfulLaunchCount(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.entity.UpdateEntity update) {
    }
    
    public final void incrementFailedLaunchCount(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.entity.UpdateEntity update) {
    }
    
    public final void markUpdatesWithMissingAssets(@org.jetbrains.annotations.NotNull()
    java.util.List<expo.modules.updates.db.entity.AssetEntity> missingAssets) {
    }
    
    @androidx.room.Delete()
    public abstract void deleteUpdates(@org.jetbrains.annotations.NotNull()
    java.util.List<expo.modules.updates.db.entity.UpdateEntity> updates);
    
    public UpdateDao() {
        super();
    }
}